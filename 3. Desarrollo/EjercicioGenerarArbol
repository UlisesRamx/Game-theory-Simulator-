import networkx as nx
from networkx.drawing.nx_pydot import to_pydot
import graphviz

Rondas = 3         
# Jugador = 3      
Estrategias = 6

G = nx.DiGraph()

def generar_arbol(rondas, estrategias):
    G.clear()
    G.add_node(0, depth=0)  # raíz

    contador = 0
    def agregar_nodos(padre, profundidad):
        nonlocal contador
        if profundidad > rondas:
            return
        for _ in range(estrategias):
            contador += 1
            hijo = contador
            G.add_node(hijo, depth=profundidad)
            G.add_edge(padre, hijo)
            agregar_nodos(hijo, profundidad + 1)

    agregar_nodos(0, 1)
    return G

generar_arbol(Rondas, Estrategias)


#Graphviz
pyd = to_pydot(G)
pyd.set_rankdir("TB")
pyd.set_splines("true")
pyd.set_overlap("false")
pyd.set_ranksep("0.5")
pyd.set_nodesep("0.3")

palette = ["#E3F2FD", "#E8F5E9", "#FFF3E0", "#F3E5F5", "#E0F7FA", "#FFFDE7"]
for node in pyd.get_nodes():
    attrs = node.get_attributes()
    depth = attrs.get("depth")
    label = attrs.get("label", "")

    node.set_shape("circle")
    node.set_style("filled")
    node.set_fontsize("22")
    node.set_color("#444444")
    node.set_penwidth("2")

    if isinstance(label, str) and label.startswith("Z"):
        node.set_fillcolor("#FFE0E0") 
    else:
        try:
            d = int(depth) if depth is not None else 0
        except:
            d = 0
        node.set_fillcolor(palette[d % len(palette)])

for edge in pyd.get_edges():
    edge.set_color("#666666")
    edge.set_fontsize("16")
    edge.set_penwidth("1")

dot_str = pyd.to_string()
src = graphviz.Source(dot_str, format="svg")
src.render("arbol_estrategias", cleanup=True)
print("Árbol renderizado en: arbol_estrategias.png")